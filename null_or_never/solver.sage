from Crypto.Util.number import long_to_bytes

MODULUS = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
EXP_PUB = 3
CIPHERTEXT = 63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828
FLAG_TEMPLATE = b"crypto{???????????????????????????????????}"
MAX_K = 10000000

Z_N = Zmod(MODULUS)

pad_len = 100 - len(FLAG_TEMPLATE)
pad_long = 2^(8 * pad_len)
pad_encrypted = Z_N(pad_long)^EXP_PUB
unpadded_ciphertext = Z_N(CIPHERTEXT) / pad_encrypted
for k in range(MAX_K):
    print(f"[+] Trying k = {k}...")
    m, ok = (Integer(unpadded_ciphertext) + k * MODULUS).nth_root(3, truncate_mode=1)
    if ok:
        print(f"[+] Found k = {k}")
        print(f"[+] Retrieved message: {long_to_bytes(m)}")
        break
